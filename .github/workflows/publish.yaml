# This is a basic workflow to help you get started with Actions

name: Publish component

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches:
      #- main
      - tbd
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      PKG_CHANGED: ${{ steps.changed_dirs.outputs.changed }}
      PKG_LIST: ${{ steps.changed_dirs.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check for changed package files
        id: changed_pkgs
        working-directory: ${{ github.workspace }}/packages
        run: |
          export DIFF_BASE="HEAD~1"
          changed_pkgs=`git diff --numstat $DIFF_BASE packages |\
            awk -F ' ' '{print $3}'`
          pkgs=()
          for pkg in $changed_pkgs; do
            if [[ $pkg != "*.TBD" ]]; then
              continue
            fi
            pkgs+=($pkg)
          done
          if [ "${#pkgs[@]}" -lt 1 ]; then
            echo "no package changed"
            echo "::set-output name=changed::false"
          else
            echo "${#pkgs[@]} package(s) changed"
            echo "::set-output name=changed::true"
          fi
          output=`printf '%s\n' "${pkgs[@]}" | jq -R . | jq -s -c .`
          echo $output
          echo "::set-output name=matrix::$output"

  build-component:
    needs: [prepare]
    if: needs.prepare.outputs.PKG_CHANGED == 'true'
    strategy:
      matrix:
        pkg: ${{ fromJson(needs.prepare.outputs.PKG_LIST) }}
        os:
          - ubuntu-latest
          - macos-latest
        arch:
          - amd64
          - arm64
        # exclude:
        #   - os: macos-latest
        #     arch: arm64
        #   - os: macos-latest
        #     arch: amd64
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Check Init lock
        run: |
          if [ ! -f init.lock ]
          then
            echo "tiup-${{ github.repository_owner }} mirror uninitialized"
            exit 2
          fi

      - id: Install-tiup
        name: Install tiup
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh

      - name: Decrypt keys
        run: |
          openssl version
          mkdir -p ~/.tiup/keys/
          echo ${{ secrets.TIUP_KEY}} > ~/.tiup/keys/tiup.key
          for file in tiup-${{ github.repository_owner }}/keys/*
          do
            if [[ $file == *encrypt ]]
            then
              de_file=${file//.encrypt/}
              openssl aes-256-cbc -d -a -pbkdf2 -in $file -out $de_file -kfile ~/.tiup/keys/tiup.key
            fi
          done
          rm -rf tiup-${{ github.repository_owner }}/keys/*encrypt
          ls -l tiup-${{ github.repository_owner }}/keys

      - id: prepare-tbd
        name: Prepare TBD
        run: git clone https://github.com/reproducible-tidb/TBD.git ../TBD

      - name: Install ninja-build tool
        uses: seanmiddleditch/gha-setup-ninja@v3

      - id: Build-component
        name: build component
        run: |
          export TBD_CACHE=`mktemp -d`
          echo ::set-output name=TBD_CACHE::"$TBD_CACHE"
          ../TBD/TBD.sh $pkg
        env:
          CI_NAME: githubaction
          TBD_CRI: none

      # - id: Publish-component


      # - name: Encrypt keys
      #   run: |
      #     mkdir -p ~/.tiup/keys
      #     echo ${{ secrets.TIUP_KEY}} > ~/.tiup/keys/tiup.key
      #     for file in tiup-${{ github.repository_owner }}/keys/*
      #     do
      #       if [[ $file == *json ]]
      #       then
      #         openssl aes-256-cbc -a -salt -pbkdf2 -in $file -out $file.encrypt -kfile ~/.tiup/keys/tiup.key 
      #       fi
      #     done
      #     rm -rf tiup-${{ github.repository_owner }}/keys/*json
      #     ls -l tiup-${{ github.repository_owner }}/keys
      
      # - name: Push Mirror
      #   uses: actions-js/push@master
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     message: publish component to ${{ github.repository_owner }}