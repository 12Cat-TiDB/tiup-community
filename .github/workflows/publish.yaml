# This is a basic workflow to help you get started with Actions

name: Publish component

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      PKG_CHANGED: ${{ steps.changed_pkgs.outputs.changed }}
      PKG_LIST: ${{ steps.changed_pkgs.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check for changed package files
        id: changed_pkgs
        working-directory: ${{ github.workspace }}/packages
        run: |
          set -x
          set +e
          export DIFF_BASE="HEAD~1"
          changed_pkgs=`git diff --numstat $DIFF_BASE |\
            awk -F ' ' '{print $3}' |\
            grep -E '^packages/' |\
            grep -E '\.TBD$'`

          pkgs=()
          for pkg in $changed_pkgs; do
            pkgs+=($pkg)
          done

          if [ "${#pkgs[@]}" -lt 1 ]; then
            echo "no package changed"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "${#pkgs[@]} package(s) changed"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

          output=`printf '%s\n' "${pkgs[@]}" | jq -R . | jq -s -c .`
          echo $output
          echo "matrix=$output" >> $GITHUB_OUTPUT

  check_lock:
    runs-on: ubuntu-latest
    needs: [prepare]
    outputs:
      initialized: ${{ steps.check_init_lock.outputs.initialized }}
    if: needs.prepare.outputs.PKG_CHANGED == 'true' 
    steps:
     - uses: actions/checkout@v3

     - name: Check Init lock
       id: check_init_lock
       run: |
        if [ ! -f init.lock ]
        then
          echo "tiup-${{ github.repository_owner }} mirror uninitialized"
          echo "initialized=false" >> $GITHUB_OUTPUT
        else
          echo "Initialized=true" >> $GITHUB_OUTPUT
        fi

  build-component:
    needs: [prepare, check_lock]
    if: needs.check_lock.outputs.initialized == 'true'
    strategy:
      matrix:
        pkg: ${{ fromJson(needs.prepare.outputs.PKG_LIST) }}
        os:
          - ubuntu-latest
          - macos-latest
        arch:
          - amd64
          - arm64
      max-parallel: 1 # don't parallel
      fail-fast: true

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - id: Install-tiup
        name: Install tiup
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh
          ~/.tiup/bin/tiup mirror set tiup-${{ github.repository_owner }}

      - id: prepare-tbd
        name: Prepare TBD
        run: |
          git clone https://github.com/srstack/TBD.git ../TBD

      - name: Install ninja-build tool
        uses: seanmiddleditch/gha-setup-ninja@v3

      - id: build-component
        name: Build component
        run: |
          export TBD_CACHE=`mktemp -d`
          echo "TBD_CACHE=$TBD_CACHE" >> $GITHUB_OUTPUT
          result=`../TBD/TBD.sh ${{ matrix.pkg }} | tail -n 1`
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            export result_enc=`echo -n $result | base64`
          else
            export result_enc=`echo -n $result | base64 -w 0`
          fi
          echo "PKG_META=$result_enc" >> $GITHUB_OUTPUT
        env:
          TBD_CRI: none

      - name: Decrypt keys
        run: |
          # make sure the repo is up-to-date
          git fetch origin && git reset --hard origin/main
          mkdir -p ~/.tiup/keys/
          echo ${{ secrets.TIUP_KEY}} > ~/.tiup/keys/tiup.key
          for file in tiup-${{ github.repository_owner }}/keys/*
          do
            if [[ $file == *encrypt ]]
            then
              de_file=${file//.encrypt/}
              openssl aes-256-cbc -d -a -pbkdf2 -in $file -out $de_file -kfile ~/.tiup/keys/tiup.key
            fi
          done
          rm -rf tiup-${{ github.repository_owner }}/keys/*encrypt

      - id: publish-component
        name: Publish component package
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            export os=darwin
          else
            export os=linux
          fi
          pkg=`echo ${{ steps.build-component.outputs.PKG_META }} | base64 -d`
          echo $pkg
          pkgname=`echo $pkg | jq -r '.package'`
          pkgver=`echo $pkg | jq -r '.version'`
          entry=`echo $pkg | jq -r '.entrypoint'`
          pkgdesc=`echo $pkg | jq -r '.description'`
          tarball=`echo $pkg | jq -r '.file'`
          echo ::set-output name=COMP_NAME::$pkgname-$pkgver-$os-${{ matrix.arch }}

          $HOME/.tiup/bin/tiup mirror publish $pkgname $pkgver \
            $tarball \
            $entry \
            --os $os \
            --arch ${{ matrix.arch }} \
            --desc $pkgdesc \
            --key tiup-${{ github.repository_owner }}/keys/${{ github.repository_owner }}.json

      - name: Encrypt keys and clean up
        run: |
          # clean up
          mkdir -p ~/.tiup/keys
          echo ${{ secrets.TIUP_KEY}} > ~/.tiup/keys/tiup.key
          for file in tiup-${{ github.repository_owner }}/keys/*
          do
            if [[ $file == *json ]]
            then
              openssl aes-256-cbc -a -salt -pbkdf2 -in $file -out $file.encrypt -kfile ~/.tiup/keys/tiup.key
            fi
          done
          rm -rf tiup-${{ github.repository_owner }}/keys/*json
          rm -rf tiup-${{ github.repository_owner }}/commits
          rm -rf ninja-build

      - name: Push Mirror
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          message: publish ${{ steps.publish-component.outputs.COMP_NAME }} to ${{ github.repository_owner }}
